/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hrl: homerow_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_layer";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "balanced";
        };

        hld_tp: hold_and_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_AND_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            hold-trigger-key-positions = <16 15 14 13 12 18 19 20 21 22 23 17>;
        };
    };

    combos {
        compatible = "zmk,combos";

        studio_unlock {
            bindings = <&studio_unlock>;
            key-positions = <1 10 29 30>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <6 10>;
        };

        capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <1 5>;
        };

        to_mouse {
            bindings = <&sl 5>;
            key-positions = <1 25>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &lt 5 Q                 &kp W  &kp E                 &kp R          &kp T        &kp Y                       &kp U     &kp I      &kp O    &kp P                    &none
&none  &hld_tp LEFT_SHIFT A    &kp S  &hrl 3 D              &hrl 1 F       &kp G        &kp H                       &hrl 2 J  &hrl 4 K   &kp L    &hld_tp LEFT_SHIFT SEMI  &none
&none  &hld_tp LEFT_COMMAND Z  &kp X  &kp C                 &kp V          &kp B        &kp N                       &kp M     &kp COMMA  &kp DOT  &hld_tp LCTRL SLASH      &none
                                      &hld_tp LEFT_ALT TAB  &kp BACKSPACE  &kp SPACE    &hld_tp LEFT_COMMAND ENTER  &kp LALT  &kp ESC
            >;
        };

        rh_num {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp LS(STAR)  &kp N7  &kp N8  &kp N9  &kp EQUAL  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LS(PLUS)  &kp N4  &kp N5  &kp N6  &kp MINUS  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp N         &kp N1  &kp N2  &kp N3  &kp DOT    &trans
                        &trans  &trans  &trans    &trans        &trans  &kp N0
            >;
        };

        lh_sym {
            bindings = <
&trans  &kp LS(EXCLAMATION)  &kp LS(AT_SIGN)  &kp LS(LEFT_BRACE)  &kp LS(RIGHT_BRACE)  &kp LS(UNDER)    &trans  &trans  &trans  &kp PIPE           &kp BACKSLASH                    &trans
&trans  &kp LS(POUND)        &kp LS(DLLR)     &kp LS(LPAR)        &kp LS(RPAR)         &kp GRAVE        &trans  &trans  &trans  &kp DOUBLE_QUOTES  &hld_tp LEFT_SHIFT SINGLE_QUOTE  &trans
&trans  &kp AMPS             &kp LS(PRCNT)    &kp LBKT            &kp RBKT             &kp LS(TILDE)    &trans  &trans  &trans  &trans             &trans                           &trans
                                              &trans              &trans               &trans           &trans  &trans  &trans
            >;
        };

        rh_nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans      &trans  &trans     &kp UP    &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans      &trans  &kp LEFT   &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans      &trans  &trans     &trans    &trans     &trans  &trans
                        &trans  &kp LGUI  &kp LALT    &trans  &kp LSHFT  &trans
            >;
        };

        lh_media {
            bindings = <
&trans  &trans  &kp C_VOLUME_DOWN  &kp K_MUTE        &kp C_VOLUME_UP  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT       &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans             &trans            &trans           &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                   &trans            &trans           &trans    &trans  &trans  &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &msc SCRL_UP    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans          &trans          &trans           &trans          &trans
                        &trans  &trans  &trans    &trans  &trans          &trans
            >;
        };
    };
};
